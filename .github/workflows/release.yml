name: Release

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches:
      - main
      - develop

env:
  GO_VERSION: '1.24'
  NODE_VERSION: '20'

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    if: github.repository == 'starpia-forge/burndler' && github.event.workflow_run.conclusion == 'success'
    outputs:
      released: ${{ steps.semantic.outputs.new_release_published }}
      version: ${{ steps.semantic.outputs.new_release_version }}
      tag: ${{ steps.semantic.outputs.new_release_git_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install semantic-release dependencies
        run: |
          npm install -g \
            semantic-release \
            @semantic-release/changelog \
            @semantic-release/exec \
            @semantic-release/git \
            @semantic-release/github \
            conventional-changelog-conventionalcommits

      - name: Install build dependencies
        run: |
          cd frontend && npm ci
          cd ../backend && go mod download

      - name: Initialize build environment
        run: |
          make init

      - name: Build application for release
        run: |
          make build

      - name: Run semantic release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

      - name: Build release binaries
        if: steps.semantic.outputs.new_release_published == 'true'
        env:
          VERSION: ${{ steps.semantic.outputs.new_release_version }}
          BUILD_TIME: $(date -u +%Y-%m-%dT%H:%M:%SZ)
          GIT_COMMIT: ${{ github.sha }}
        run: |
          # Build main binary with version info using make
          make build-backend-with-static

          # Make binary executable
          chmod +x dist/burndler

      - name: Upload release artifacts
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: release-binaries-${{ steps.semantic.outputs.new_release_version }}
          path: |
            dist/burndler
          retention-days: 90

  docker-release:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.released == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.release.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.release.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.release.outputs.version }}
            BUILD_TIME=${{ github.event.head_commit.timestamp }}
            GIT_COMMIT=${{ github.sha }}

  package-release:
    name: Create Offline Installer Package
    runs-on: ubuntu-latest
    needs: [release, docker-release]
    if: needs.release.outputs.released == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download release binaries
        uses: actions/download-artifact@v4
        with:
          name: release-binaries-${{ needs.release.outputs.version }}
          path: dist/

      - name: Make binaries executable
        run: chmod +x dist/*

      - name: Create offline installer package
        env:
          VERSION: ${{ needs.release.outputs.version }}
        run: |
          # Create installer package directory
          mkdir -p dist/installers

          # Note: Offline installer packaging feature not yet implemented
          # TODO: Implement installer packaging logic when needed
          echo "Offline installer packaging will be implemented in future release"

      # Note: Installer package upload disabled until packaging is implemented
      # - name: Upload installer package
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: installer-package-${{ needs.release.outputs.version }}
      #     path: dist/installers/*.tar.gz
      #     retention-days: 365

      # - name: Attach installer to GitHub release
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     gh release upload ${{ needs.release.outputs.tag }} \
      #       dist/installers/burndler-${{ needs.release.outputs.version }}-installer.tar.gz \
      #       --clobber

  notify:
    name: Release Notification
    runs-on: ubuntu-latest
    needs: [release, docker-release, package-release]
    if: needs.release.outputs.released == 'true'

    steps:
      - name: Notify release completion
        run: |
          echo "ðŸš€ Burndler v${{ needs.release.outputs.version }} has been released!"
          echo "ðŸ“¦ Docker image: ghcr.io/${{ github.repository }}:${{ needs.release.outputs.version }}"
          echo "ðŸ’¾ Offline installer: burndler-${{ needs.release.outputs.version }}-installer.tar.gz"
          echo "ðŸ”— Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.release.outputs.tag }}"