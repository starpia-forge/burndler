name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.24'
  NODE_VERSION: '20'

jobs:
  validate:
    name: Validate Project Structure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate architectural constraints
        run: |
          echo "🔍 Validating Burndler architectural constraints..."

          # Check for forbidden build directives (ignore comments)
          if grep -r "^[[:space:]]*build:" compose/*.yaml 2>/dev/null; then
            echo "❌ ERROR: 'build:' directive found in compose files!"
            exit 1
          fi

          # Check for Dockerfiles (prebuilt images only)
          if find . -name "Dockerfile*" -not -path "./.git/*" | grep -v "./Dockerfile$"; then
            echo "❌ ERROR: Unexpected Dockerfiles found! Use prebuilt images only"
            exit 1
          fi

          echo "✅ Architectural constraints validated"

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('backend/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Go dependencies
        run: |
          cd backend && go mod download

      - name: Install Node dependencies
        run: |
          cd frontend && npm ci

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin latest

      - name: Lint Go code
        run: |
          cd backend && $(go env GOPATH)/bin/golangci-lint run

      - name: Lint TypeScript/React
        run: |
          cd frontend && npm run lint

      - name: Check code formatting
        run: |
          cd frontend && npm run format:check

  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: burndler_test
          POSTGRES_USER: burndler
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('backend/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          cd backend && go mod download
          cd ../frontend && npm ci

      - name: Run Go unit tests
        run: |
          cd backend && go test -v -short ./...

      - name: Run Go integration tests
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: burndler_test
          DB_USER: burndler
          DB_PASSWORD: test_password
          DB_SSL_MODE: disable
          JWT_SECRET: test-secret-for-ci
        run: |
          cd test/integration && go test -v ./...

      - name: Run frontend tests
        run: |
          cd frontend && npm test

      - name: Upload Go coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: backend/coverage.out
          flags: backend
          name: backend-coverage

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install frontend dependencies
        run: |
          cd frontend && npm ci

      - name: Build frontend
        run: |
          cd frontend && npm run build

      - name: Build backend with embedded frontend
        run: |
          # Copy frontend build to backend for embedding
          rm -rf backend/internal/static/dist
          cp -r frontend/dist backend/internal/static/dist

          # Build Go binary
          cd backend && go build -o ../dist/burndler cmd/api/main.go


      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: burndler-binaries
          path: |
            dist/burndler
          retention-days: 30

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run secret detection
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified